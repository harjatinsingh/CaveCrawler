<?xml version="1.0"?>

<launch>    
    <include file="$(find localization)/launch/ekf_online.launch"/>
    <include file="$(find velodyne_pointcloud)/launch/VLP16_points.launch"/>

    <node pkg="autonomy" type="final_code" name="final_code" output="screen"/>
    
    <node pkg="nodelet" type="nodelet" name="pcl_manager" args="manager" output="screen" />
        <!-- Run a Crop box filter to remove the additional points to clean NaNs -->
    <node pkg="nodelet" type="nodelet" name="cropbox" args="load pcl/CropBox pcl_manager" output="screen">
    <remap from="~input" to="/velodyne_points" />
    <rosparam>
      filter_field_name: min_x
      filter_limit_min: -1.0
      
      filter_field_name: max_x
      filter_limit_min:  1.0
      filter_field_name: min_y
      filter_limit_min: -1.0
      filter_field_name: max_y
      filter_limit_min:  1.0
    </rosparam>
    </node>
    
    <!-- include file="$(find autonomy)/launch/cam_lidar.launch"/-->

    <include file="$(find pointcloud_to_laserscan)/launch/point2laser.launch"/>
    
    <node name="joy_node" pkg="joy" type="joy_node"/>
    <!--node ns="arduino" name="joy_map_node" pkg="joy_arduino" type="joy_mapping" output="screen"/>
    <node ns="arduino" pkg="rosserial_python" type="serial_node.py" name="serial_node">
      <param name="port" value="/dev/ttyUSB0"/>
      <param name="baud" value="57600"/>
    </node-->

    <include file="$(find cavecrawler_planning)/launch/complete_planning.launch"/>

</launch>
